// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "StabilizerService.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
OpenHRP::StabilizerService::stParam::operator>>= (cdrStream &_n) const
{
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(k_tpcc_p),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      k_tpcc_p[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(k_tpcc_x),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      k_tpcc_x[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(k_brot_p),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      k_brot_p[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(k_brot_tc),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      k_brot_tc[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(k_run_b),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      k_run_b[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(d_run_b),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      d_run_b[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(tdfke),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      tdfke[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(tdftc),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      tdftc[_0i0] >>= _n;
    }
  }
  k_run_x >>= _n;
  k_run_y >>= _n;
  d_run_x >>= _n;
  d_run_y >>= _n;
  _n.marshalBoolean(eefm_pos_control_switch);
  _n.marshalBoolean(eefm_rot_control_switch);
  _n.marshalBoolean(eefm_att_control_switch);
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(eefm_k1),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      eefm_k1[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(eefm_k2),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      eefm_k2[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(eefm_k3),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      eefm_k3[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(eefm_zmp_delay_time_const),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      eefm_zmp_delay_time_const[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(eefm_ref_zmp_aux),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      eefm_ref_zmp_aux[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(eefm_rot_damping_gain),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      eefm_rot_damping_gain[_0i0] >>= _n;
    }
  }
  eefm_rot_time_const >>= _n;
  eefm_pos_damping_gain >>= _n;
  eefm_pos_time_const_support >>= _n;
  eefm_pos_time_const_swing >>= _n;
  eefm_pos_transition_time >>= _n;
  eefm_pos_margin_time >>= _n;
  eefm_leg_inside_margin >>= _n;
  eefm_leg_front_margin >>= _n;
  eefm_leg_rear_margin >>= _n;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(eefm_body_attitude_control_gain),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      eefm_body_attitude_control_gain[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(eefm_body_attitude_control_time_const),16,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 16);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      eefm_body_attitude_control_time_const[_0i0] >>= _n;
    }
  }
  eefm_cogvel_cutoff_freq >>= _n;
  st_algorithm >>= _n;
  controller_mode >>= _n;

}

void
OpenHRP::StabilizerService::stParam::operator<<= (cdrStream &_n)
{
  _n.unmarshalArrayDouble((_CORBA_Double*)(k_tpcc_p), 2);
  _n.unmarshalArrayDouble((_CORBA_Double*)(k_tpcc_x), 2);
  _n.unmarshalArrayDouble((_CORBA_Double*)(k_brot_p), 2);
  _n.unmarshalArrayDouble((_CORBA_Double*)(k_brot_tc), 2);
  _n.unmarshalArrayDouble((_CORBA_Double*)(k_run_b), 2);
  _n.unmarshalArrayDouble((_CORBA_Double*)(d_run_b), 2);
  _n.unmarshalArrayDouble((_CORBA_Double*)(tdfke), 2);
  _n.unmarshalArrayDouble((_CORBA_Double*)(tdftc), 2);
  (::CORBA::Double&)k_run_x <<= _n;
  (::CORBA::Double&)k_run_y <<= _n;
  (::CORBA::Double&)d_run_x <<= _n;
  (::CORBA::Double&)d_run_y <<= _n;
  eefm_pos_control_switch = _n.unmarshalBoolean();
  eefm_rot_control_switch = _n.unmarshalBoolean();
  eefm_att_control_switch = _n.unmarshalBoolean();
  _n.unmarshalArrayDouble((_CORBA_Double*)(eefm_k1), 2);
  _n.unmarshalArrayDouble((_CORBA_Double*)(eefm_k2), 2);
  _n.unmarshalArrayDouble((_CORBA_Double*)(eefm_k3), 2);
  _n.unmarshalArrayDouble((_CORBA_Double*)(eefm_zmp_delay_time_const), 2);
  _n.unmarshalArrayDouble((_CORBA_Double*)(eefm_ref_zmp_aux), 2);
  _n.unmarshalArrayDouble((_CORBA_Double*)(eefm_rot_damping_gain), 2);
  (::CORBA::Double&)eefm_rot_time_const <<= _n;
  (::CORBA::Double&)eefm_pos_damping_gain <<= _n;
  (::CORBA::Double&)eefm_pos_time_const_support <<= _n;
  (::CORBA::Double&)eefm_pos_time_const_swing <<= _n;
  (::CORBA::Double&)eefm_pos_transition_time <<= _n;
  (::CORBA::Double&)eefm_pos_margin_time <<= _n;
  (::CORBA::Double&)eefm_leg_inside_margin <<= _n;
  (::CORBA::Double&)eefm_leg_front_margin <<= _n;
  (::CORBA::Double&)eefm_leg_rear_margin <<= _n;
  _n.unmarshalArrayDouble((_CORBA_Double*)(eefm_body_attitude_control_gain), 2);
  _n.unmarshalArrayDouble((_CORBA_Double*)(eefm_body_attitude_control_time_const), 2);
  (::CORBA::Double&)eefm_cogvel_cutoff_freq <<= _n;
  (STAlgorithm&)st_algorithm <<= _n;
  (ControllerMode&)controller_mode <<= _n;

}

OpenHRP::StabilizerService_ptr OpenHRP::StabilizerService_Helper::_nil() {
  return ::OpenHRP::StabilizerService::_nil();
}

::CORBA::Boolean OpenHRP::StabilizerService_Helper::is_nil(::OpenHRP::StabilizerService_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::StabilizerService_Helper::release(::OpenHRP::StabilizerService_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::StabilizerService_Helper::marshalObjRef(::OpenHRP::StabilizerService_ptr obj, cdrStream& s) {
  ::OpenHRP::StabilizerService::_marshalObjRef(obj, s);
}

OpenHRP::StabilizerService_ptr OpenHRP::StabilizerService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::StabilizerService::_unmarshalObjRef(s);
}

void OpenHRP::StabilizerService_Helper::duplicate(::OpenHRP::StabilizerService_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::StabilizerService_ptr
OpenHRP::StabilizerService::_duplicate(::OpenHRP::StabilizerService_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::StabilizerService_ptr
OpenHRP::StabilizerService::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::StabilizerService_ptr
OpenHRP::StabilizerService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::StabilizerService_ptr
OpenHRP::StabilizerService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_StabilizerService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_StabilizerService* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_StabilizerService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::StabilizerService::_PD_repoId = "IDL:OpenHRP/StabilizerService:1.0";


OpenHRP::_objref_StabilizerService::~_objref_StabilizerService() {
  
}


OpenHRP::_objref_StabilizerService::_objref_StabilizerService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::StabilizerService::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_StabilizerService::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::StabilizerService::_PD_repoId )
    return (::OpenHRP::StabilizerService_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::StabilizerService::_PD_repoId) )
    return (::OpenHRP::StabilizerService_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_o_cOpenHRP_mStabilizerService_mstParam
class _0RL_cd_23dc8c85602942e6_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23dc8c85602942e6_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::StabilizerService::stParam arg_0_;
  OpenHRP::StabilizerService::stParam* arg_0;
};

void _0RL_cd_23dc8c85602942e6_00000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::StabilizerService::stParam&) *arg_0 >>= _n;

}

void _0RL_cd_23dc8c85602942e6_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (OpenHRP::StabilizerService::stParam&)*arg_0 <<= _n;

}

const char* const _0RL_cd_23dc8c85602942e6_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_23dc8c85602942e6_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23dc8c85602942e6_00000000* tcd = (_0RL_cd_23dc8c85602942e6_00000000*)cd;
  OpenHRP::_impl_StabilizerService* impl = (OpenHRP::_impl_StabilizerService*) svnt->_ptrToInterface(OpenHRP::StabilizerService::_PD_repoId);
  impl->getParameter(*tcd->arg_0);


}

void OpenHRP::_objref_StabilizerService::getParameter(::OpenHRP::StabilizerService::stParam& i_param)
{
  _0RL_cd_23dc8c85602942e6_00000000 _call_desc(_0RL_lcfn_23dc8c85602942e6_10000000, "getParameter", 13);
  _call_desc.arg_0 = &(::OpenHRP::StabilizerService::stParam&) i_param;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cOpenHRP_mStabilizerService_mstParam
class _0RL_cd_23dc8c85602942e6_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23dc8c85602942e6_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  OpenHRP::StabilizerService::stParam arg_0_;
  const OpenHRP::StabilizerService::stParam* arg_0;
};

void _0RL_cd_23dc8c85602942e6_20000000::marshalArguments(cdrStream& _n)
{
  (const OpenHRP::StabilizerService::stParam&) *arg_0 >>= _n;

}

void _0RL_cd_23dc8c85602942e6_20000000::unmarshalArguments(cdrStream& _n)
{
  (OpenHRP::StabilizerService::stParam&)arg_0_ <<= _n;
  arg_0 = &arg_0_;

}

const char* const _0RL_cd_23dc8c85602942e6_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_23dc8c85602942e6_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23dc8c85602942e6_20000000* tcd = (_0RL_cd_23dc8c85602942e6_20000000*)cd;
  OpenHRP::_impl_StabilizerService* impl = (OpenHRP::_impl_StabilizerService*) svnt->_ptrToInterface(OpenHRP::StabilizerService::_PD_repoId);
  impl->setParameter(*tcd->arg_0);


}

void OpenHRP::_objref_StabilizerService::setParameter(const ::OpenHRP::StabilizerService::stParam& i_param)
{
  _0RL_cd_23dc8c85602942e6_20000000 _call_desc(_0RL_lcfn_23dc8c85602942e6_30000000, "setParameter", 13);
  _call_desc.arg_0 = &(::OpenHRP::StabilizerService::stParam&) i_param;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_23dc8c85602942e6_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23dc8c85602942e6_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_23dc8c85602942e6_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_23dc8c85602942e6_50000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_StabilizerService* impl = (OpenHRP::_impl_StabilizerService*) svnt->_ptrToInterface(OpenHRP::StabilizerService::_PD_repoId);
  impl->startStabilizer();


}

void OpenHRP::_objref_StabilizerService::startStabilizer()
{
  _0RL_cd_23dc8c85602942e6_40000000 _call_desc(_0RL_lcfn_23dc8c85602942e6_50000000, "startStabilizer", 16);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_23dc8c85602942e6_60000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_StabilizerService* impl = (OpenHRP::_impl_StabilizerService*) svnt->_ptrToInterface(OpenHRP::StabilizerService::_PD_repoId);
  impl->stopStabilizer();


}

void OpenHRP::_objref_StabilizerService::stopStabilizer()
{
  _0RL_cd_23dc8c85602942e6_40000000 _call_desc(_0RL_lcfn_23dc8c85602942e6_60000000, "stopStabilizer", 15);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_23dc8c85602942e6_70000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23dc8c85602942e6_70000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Boolean result;
};

void _0RL_cd_23dc8c85602942e6_70000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_23dc8c85602942e6_70000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_23dc8c85602942e6_70000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_23dc8c85602942e6_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23dc8c85602942e6_70000000* tcd = (_0RL_cd_23dc8c85602942e6_70000000*)cd;
  OpenHRP::_impl_StabilizerService* impl = (OpenHRP::_impl_StabilizerService*) svnt->_ptrToInterface(OpenHRP::StabilizerService::_PD_repoId);
  tcd->result = impl->dummy();


}

::CORBA::Boolean OpenHRP::_objref_StabilizerService::dummy()
{
  _0RL_cd_23dc8c85602942e6_70000000 _call_desc(_0RL_lcfn_23dc8c85602942e6_80000000, "dummy", 6);


  _invoke(_call_desc);
  return _call_desc.result;


}
OpenHRP::_pof_StabilizerService::~_pof_StabilizerService() {}


omniObjRef*
OpenHRP::_pof_StabilizerService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_StabilizerService(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_StabilizerService::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::StabilizerService::_PD_repoId) )
    return 1;
  
  return 0;
}

const OpenHRP::_pof_StabilizerService _the_pof_OpenHRP_mStabilizerService;

OpenHRP::_impl_StabilizerService::~_impl_StabilizerService() {}


::CORBA::Boolean
OpenHRP::_impl_StabilizerService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getParameter") ) {

    _0RL_cd_23dc8c85602942e6_00000000 _call_desc(_0RL_lcfn_23dc8c85602942e6_10000000, "getParameter", 13, 1);
    _call_desc.arg_0 = &_call_desc.arg_0_;
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setParameter") ) {

    _0RL_cd_23dc8c85602942e6_20000000 _call_desc(_0RL_lcfn_23dc8c85602942e6_30000000, "setParameter", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "startStabilizer") ) {

    _0RL_cd_23dc8c85602942e6_40000000 _call_desc(_0RL_lcfn_23dc8c85602942e6_50000000, "startStabilizer", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "stopStabilizer") ) {

    _0RL_cd_23dc8c85602942e6_40000000 _call_desc(_0RL_lcfn_23dc8c85602942e6_60000000, "stopStabilizer", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "dummy") ) {

    _0RL_cd_23dc8c85602942e6_70000000 _call_desc(_0RL_lcfn_23dc8c85602942e6_80000000, "dummy", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
OpenHRP::_impl_StabilizerService::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::StabilizerService::_PD_repoId )
    return (::OpenHRP::_impl_StabilizerService*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::StabilizerService::_PD_repoId) )
    return (::OpenHRP::_impl_StabilizerService*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_StabilizerService::_mostDerivedRepoId()
{
  return ::OpenHRP::StabilizerService::_PD_repoId;
}

POA_OpenHRP::StabilizerService::~StabilizerService() {}

