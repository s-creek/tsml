// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "creekSequencePlayerService.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



OpenHRP::creekSequencePlayerService_ptr OpenHRP::creekSequencePlayerService_Helper::_nil() {
  return ::OpenHRP::creekSequencePlayerService::_nil();
}

::CORBA::Boolean OpenHRP::creekSequencePlayerService_Helper::is_nil(::OpenHRP::creekSequencePlayerService_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::creekSequencePlayerService_Helper::release(::OpenHRP::creekSequencePlayerService_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::creekSequencePlayerService_Helper::marshalObjRef(::OpenHRP::creekSequencePlayerService_ptr obj, cdrStream& s) {
  ::OpenHRP::creekSequencePlayerService::_marshalObjRef(obj, s);
}

OpenHRP::creekSequencePlayerService_ptr OpenHRP::creekSequencePlayerService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::creekSequencePlayerService::_unmarshalObjRef(s);
}

void OpenHRP::creekSequencePlayerService_Helper::duplicate(::OpenHRP::creekSequencePlayerService_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::creekSequencePlayerService_ptr
OpenHRP::creekSequencePlayerService::_duplicate(::OpenHRP::creekSequencePlayerService_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::creekSequencePlayerService_ptr
OpenHRP::creekSequencePlayerService::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::creekSequencePlayerService_ptr
OpenHRP::creekSequencePlayerService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::creekSequencePlayerService_ptr
OpenHRP::creekSequencePlayerService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_creekSequencePlayerService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_creekSequencePlayerService* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_creekSequencePlayerService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::creekSequencePlayerService::_PD_repoId = "IDL:OpenHRP/creekSequencePlayerService:1.0";


OpenHRP::_objref_creekSequencePlayerService::~_objref_creekSequencePlayerService() {
  
}


OpenHRP::_objref_creekSequencePlayerService::_objref_creekSequencePlayerService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::creekSequencePlayerService::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_creekSequencePlayerService::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::creekSequencePlayerService::_PD_repoId )
    return (::OpenHRP::creekSequencePlayerService_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::creekSequencePlayerService::_PD_repoId) )
    return (::OpenHRP::creekSequencePlayerService_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_80d7548870faf0f8_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_80d7548870faf0f8_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_80d7548870faf0f8_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_80d7548870faf0f8_10000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_creekSequencePlayerService* impl = (OpenHRP::_impl_creekSequencePlayerService*) svnt->_ptrToInterface(OpenHRP::creekSequencePlayerService::_PD_repoId);
  impl->waitInterpolation();


}

void OpenHRP::_objref_creekSequencePlayerService::waitInterpolation()
{
  _0RL_cd_80d7548870faf0f8_00000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_10000000, "waitInterpolation", 18);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cOpenHRP_mdSequence_i_cdouble
class _0RL_cd_80d7548870faf0f8_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_80d7548870faf0f8_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::dSequence_var arg_0_;
  const OpenHRP::dSequence* arg_0;
  ::CORBA::Double arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_80d7548870faf0f8_20000000::marshalArguments(cdrStream& _n)
{
  (const OpenHRP::dSequence&) *arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_80d7548870faf0f8_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new OpenHRP::dSequence;
  (OpenHRP::dSequence&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  (::CORBA::Double&)arg_1 <<= _n;

}

void _0RL_cd_80d7548870faf0f8_20000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_80d7548870faf0f8_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_80d7548870faf0f8_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_80d7548870faf0f8_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_80d7548870faf0f8_20000000* tcd = (_0RL_cd_80d7548870faf0f8_20000000*)cd;
  OpenHRP::_impl_creekSequencePlayerService* impl = (OpenHRP::_impl_creekSequencePlayerService*) svnt->_ptrToInterface(OpenHRP::creekSequencePlayerService::_PD_repoId);
  tcd->result = impl->setJointAngles(*tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean OpenHRP::_objref_creekSequencePlayerService::setJointAngles(const ::OpenHRP::dSequence& jvs, ::CORBA::Double tm)
{
  _0RL_cd_80d7548870faf0f8_20000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_30000000, "setJointAngles", 15);
  _call_desc.arg_0 = &(::OpenHRP::dSequence&) jvs;
  _call_desc.arg_1 = tm;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cdouble_i_cdouble
class _0RL_cd_80d7548870faf0f8_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_80d7548870faf0f8_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Double arg_1;
  ::CORBA::Double arg_2;
  ::CORBA::Boolean result;
};

void _0RL_cd_80d7548870faf0f8_40000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_80d7548870faf0f8_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Double&)arg_1 <<= _n;
  (::CORBA::Double&)arg_2 <<= _n;

}

void _0RL_cd_80d7548870faf0f8_40000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_80d7548870faf0f8_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_80d7548870faf0f8_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_80d7548870faf0f8_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_80d7548870faf0f8_40000000* tcd = (_0RL_cd_80d7548870faf0f8_40000000*)cd;
  OpenHRP::_impl_creekSequencePlayerService* impl = (OpenHRP::_impl_creekSequencePlayerService*) svnt->_ptrToInterface(OpenHRP::creekSequencePlayerService::_PD_repoId);
  tcd->result = impl->setJointAngle(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean OpenHRP::_objref_creekSequencePlayerService::setJointAngle(const char* jname, ::CORBA::Double jv, ::CORBA::Double tm)
{
  _0RL_cd_80d7548870faf0f8_40000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_50000000, "setJointAngle", 14);
  _call_desc.arg_0 = jname;
  _call_desc.arg_1 = jv;
  _call_desc.arg_2 = tm;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_80d7548870faf0f8_60000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_80d7548870faf0f8_20000000* tcd = (_0RL_cd_80d7548870faf0f8_20000000*)cd;
  OpenHRP::_impl_creekSequencePlayerService* impl = (OpenHRP::_impl_creekSequencePlayerService*) svnt->_ptrToInterface(OpenHRP::creekSequencePlayerService::_PD_repoId);
  tcd->result = impl->setBasePos(*tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean OpenHRP::_objref_creekSequencePlayerService::setBasePos(const ::OpenHRP::dSequence& pos, ::CORBA::Double tm)
{
  _0RL_cd_80d7548870faf0f8_20000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_60000000, "setBasePos", 11);
  _call_desc.arg_0 = &(::OpenHRP::dSequence&) pos;
  _call_desc.arg_1 = tm;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_80d7548870faf0f8_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_80d7548870faf0f8_20000000* tcd = (_0RL_cd_80d7548870faf0f8_20000000*)cd;
  OpenHRP::_impl_creekSequencePlayerService* impl = (OpenHRP::_impl_creekSequencePlayerService*) svnt->_ptrToInterface(OpenHRP::creekSequencePlayerService::_PD_repoId);
  tcd->result = impl->setBaseRpy(*tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean OpenHRP::_objref_creekSequencePlayerService::setBaseRpy(const ::OpenHRP::dSequence& rpy, ::CORBA::Double tm)
{
  _0RL_cd_80d7548870faf0f8_20000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_70000000, "setBaseRpy", 11);
  _call_desc.arg_0 = &(::OpenHRP::dSequence&) rpy;
  _call_desc.arg_1 = tm;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_80d7548870faf0f8_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_80d7548870faf0f8_20000000* tcd = (_0RL_cd_80d7548870faf0f8_20000000*)cd;
  OpenHRP::_impl_creekSequencePlayerService* impl = (OpenHRP::_impl_creekSequencePlayerService*) svnt->_ptrToInterface(OpenHRP::creekSequencePlayerService::_PD_repoId);
  tcd->result = impl->setZmp(*tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean OpenHRP::_objref_creekSequencePlayerService::setZmp(const ::OpenHRP::dSequence& zmp, ::CORBA::Double tm)
{
  _0RL_cd_80d7548870faf0f8_20000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_80000000, "setZmp", 7);
  _call_desc.arg_0 = &(::OpenHRP::dSequence&) zmp;
  _call_desc.arg_1 = tm;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_80d7548870faf0f8_90000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_80d7548870faf0f8_90000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Boolean result;
};

void _0RL_cd_80d7548870faf0f8_90000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_80d7548870faf0f8_90000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_80d7548870faf0f8_90000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_80d7548870faf0f8_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_80d7548870faf0f8_90000000* tcd = (_0RL_cd_80d7548870faf0f8_90000000*)cd;
  OpenHRP::_impl_creekSequencePlayerService* impl = (OpenHRP::_impl_creekSequencePlayerService*) svnt->_ptrToInterface(OpenHRP::creekSequencePlayerService::_PD_repoId);
  tcd->result = impl->isEmpty();


}

::CORBA::Boolean OpenHRP::_objref_creekSequencePlayerService::isEmpty()
{
  _0RL_cd_80d7548870faf0f8_90000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_a0000000, "isEmpty", 8);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_80d7548870faf0f8_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_80d7548870faf0f8_20000000* tcd = (_0RL_cd_80d7548870faf0f8_20000000*)cd;
  OpenHRP::_impl_creekSequencePlayerService* impl = (OpenHRP::_impl_creekSequencePlayerService*) svnt->_ptrToInterface(OpenHRP::creekSequencePlayerService::_PD_repoId);
  tcd->result = impl->setBasePosRel(*tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean OpenHRP::_objref_creekSequencePlayerService::setBasePosRel(const ::OpenHRP::dSequence& pos, ::CORBA::Double tm)
{
  _0RL_cd_80d7548870faf0f8_20000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_b0000000, "setBasePosRel", 14);
  _call_desc.arg_0 = &(::OpenHRP::dSequence&) pos;
  _call_desc.arg_1 = tm;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_clong
class _0RL_cd_80d7548870faf0f8_c0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_80d7548870faf0f8_c0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
};

void _0RL_cd_80d7548870faf0f8_c0000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_80d7548870faf0f8_c0000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

const char* const _0RL_cd_80d7548870faf0f8_c0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_80d7548870faf0f8_d0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_80d7548870faf0f8_c0000000* tcd = (_0RL_cd_80d7548870faf0f8_c0000000*)cd;
  OpenHRP::_impl_creekSequencePlayerService* impl = (OpenHRP::_impl_creekSequencePlayerService*) svnt->_ptrToInterface(OpenHRP::creekSequencePlayerService::_PD_repoId);
  impl->jointCalib(tcd->arg_0);


}

void OpenHRP::_objref_creekSequencePlayerService::jointCalib(::CORBA::Long scale)
{
  _0RL_cd_80d7548870faf0f8_c0000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_d0000000, "jointCalib", 11);
  _call_desc.arg_0 = scale;

  _invoke(_call_desc);



}
OpenHRP::_pof_creekSequencePlayerService::~_pof_creekSequencePlayerService() {}


omniObjRef*
OpenHRP::_pof_creekSequencePlayerService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_creekSequencePlayerService(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_creekSequencePlayerService::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::creekSequencePlayerService::_PD_repoId) )
    return 1;
  
  return 0;
}

const OpenHRP::_pof_creekSequencePlayerService _the_pof_OpenHRP_mcreekSequencePlayerService;

OpenHRP::_impl_creekSequencePlayerService::~_impl_creekSequencePlayerService() {}


::CORBA::Boolean
OpenHRP::_impl_creekSequencePlayerService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "waitInterpolation") ) {

    _0RL_cd_80d7548870faf0f8_00000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_10000000, "waitInterpolation", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setJointAngles") ) {

    _0RL_cd_80d7548870faf0f8_20000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_30000000, "setJointAngles", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setJointAngle") ) {

    _0RL_cd_80d7548870faf0f8_40000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_50000000, "setJointAngle", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setBasePos") ) {

    _0RL_cd_80d7548870faf0f8_20000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_60000000, "setBasePos", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setBaseRpy") ) {

    _0RL_cd_80d7548870faf0f8_20000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_70000000, "setBaseRpy", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setZmp") ) {

    _0RL_cd_80d7548870faf0f8_20000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_80000000, "setZmp", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "isEmpty") ) {

    _0RL_cd_80d7548870faf0f8_90000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_a0000000, "isEmpty", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setBasePosRel") ) {

    _0RL_cd_80d7548870faf0f8_20000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_b0000000, "setBasePosRel", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "jointCalib") ) {

    _0RL_cd_80d7548870faf0f8_c0000000 _call_desc(_0RL_lcfn_80d7548870faf0f8_d0000000, "jointCalib", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
OpenHRP::_impl_creekSequencePlayerService::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::creekSequencePlayerService::_PD_repoId )
    return (::OpenHRP::_impl_creekSequencePlayerService*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::creekSequencePlayerService::_PD_repoId) )
    return (::OpenHRP::_impl_creekSequencePlayerService*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_creekSequencePlayerService::_mostDerivedRepoId()
{
  return ::OpenHRP::creekSequencePlayerService::_PD_repoId;
}

POA_OpenHRP::creekSequencePlayerService::~creekSequencePlayerService() {}

